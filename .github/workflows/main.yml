# =======================================================
#         ditzz Ultimate Workflow (RDP) - v9.5 OPTIMIZED
# =======================================================
name: ditzz RDP (Ultimate RDP + OBS Performance)

on:
  workflow_dispatch:

jobs:
  rdp-session:
    runs-on: windows-latest
    timeout-minutes: 360

    steps:
      - name: "[0] Cache Installers"
        uses: actions/cache@v3
        with:
          path: C:\cached-installers
          key: ${{ runner.os }}-core-installers-v1

      - name: "[1] Create 'ditzz' User for RDP"
        shell: powershell
        run: |
          $ditzzPass = "P@ssword123!";
          net user "ditzz" $ditzzPass /add /fullname:"ditzz";
          Set-LocalUser -Name "ditzz" -PasswordNeverExpires $true;
          net localgroup "Administrators" "ditzz" /add;
          net localgroup "Remote Desktop Users" "ditzz" /add;
          echo "RDP_USER=ditzz" >> $env:GITHUB_ENV
          echo "RDP_PASS=$ditzzPass" >> $env:GITHUB_ENV
          Write-Host "-> User 'ditzz' created and configured for RDP access."

      - name: "[2] Enable RDP & Apply ALL Performance Optimizations"
        shell: powershell
        run: |
          Write-Host "-> Enabling Remote Desktop..."
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0 -Force
          Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
          
          Write-Host "-> Activating Ultimate Performance Power Plan..."
          powercfg -duplicatescheme e9a42b02-d5df-448d-aa00-03f14749eb61
          $up = powercfg -list | ? {$_ -like "*Ultimate*"} | % {$_.Split(' ')[3]}
          powercfg -setactive $up
          
          Write-Host "-> Disabling non-essential services..."
          Set-MpPreference -DisableRealtimeMonitoring $true
          try { Set-Service -Name "WinDefend" -StartupType Disabled -ErrorAction Stop } catch {}
          Set-Service -Name "wuauserv" -StartupType Disabled
          Set-Service -Name "DiagTrack" -StartupType Disabled -ErrorAction SilentlyContinue
          Set-Service -Name "dmwappushservice" -StartupType Disabled -ErrorAction SilentlyContinue
          
          Write-Host "-> Aggressive system debloat..."
          Get-AppxPackage *Microsoft.WindowsStore* | Remove-AppxPackage -ErrorAction SilentlyContinue
          Get-AppxPackage *Xbox* | Remove-AppxPackage -ErrorAction SilentlyContinue
          Get-AppxPackage *Microsoft.People* | Remove-AppxPackage -ErrorAction SilentlyContinue
          Get-AppxPackage *Microsoft.Wallet* | Remove-AppxPackage -ErrorAction SilentlyContinue
          Get-AppxPackage *Microsoft.ZuneMusic* | Remove-AppxPackage -ErrorAction SilentlyContinue
          Get-AppxPackage *Microsoft.ZuneVideo* | Remove-AppxPackage -ErrorAction SilentlyContinue
          Get-AppxPackage *Microsoft.YourPhone* | Remove-AppxPackage -ErrorAction SilentlyContinue
          Get-AppxPackage *Microsoft.WindowsFeedbackHub* | Remove-AppxPackage -ErrorAction SilentlyContinue
          Get-AppxPackage *Microsoft.GetHelp* | Remove-AppxPackage -ErrorAction SilentlyContinue
          
          Write-Host "-> Optimizing input devices for zero-delay response..."
          Set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\Mouclass" -Name "MouseDataQueueSize" -Value 8
          Set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\mouhid\Parameters" -Name "PollingRate" -Value 125
          Set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\Keyboard Layout" -Name "KeyboardDelay" -Value 0
          
          Write-Host "-> Applying ultra-low latency network tweaks..."
          New-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters" -Name "DefaultTTL" -Value 64 -PropertyType DWORD -Force
          New-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters" -Name "TcpAckFrequency" -Value 1 -PropertyType DWORD -Force
          New-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters" -Name "TcpDelAckTicks" -Value 0 -PropertyType DWORD -Force
          
          Write-Host "-> Disabling visual animations for instant UI response..."
          Set-ItemProperty -Path "HKCU:\Control Panel\Desktop\WindowMetrics" -Name "MinAnimate" -Value 0
          Set-ItemProperty -Path "HKCU:\Control Panel\Desktop" -Name "DragFullWindows" -Value 0
          Set-ItemProperty -Path "HKCU:\Control Panel\Desktop" -Name "FontSmoothing" -Value 0
          
          Write-Host "-> Creating maintenance script for sustained performance..."
          $maintenanceScript = @"
          # Bersihkan memori secara agresif
          Get-Process | Where-Object { `$_.WorkingSet -gt 200MB } | Stop-Process -Force
          # Nonaktifkan layanan non-kritis
          Get-Service | Where-Object { `$_.Status -eq 'Running' -and `$_.CanStop -and `$_.Name -notin ('TermService', 'Tls') } | Stop-Service -Force
          "@
          Set-Content -Path "C:\maintenance.ps1" -Value $maintenanceScript
          # Buat scheduled task untuk dijalankan setiap 15 menit
          $action = New-ScheduledTaskAction -Execute "powershell.exe" -Argument "C:\maintenance.ps1"
          $trigger = New-ScheduledTaskTrigger -Minute 15
          Register-ScheduledTask -Action $action -Trigger $trigger -TaskName "PerformanceMaintenance" -Description "Keep system optimized during RDP session"
          
          Write-Host "-> All performance optimizations applied."

      - name: "[3] Install Steam & Tailscale"
        shell: powershell
        run: |
          New-Item -Path "C:\cached-installers" -ItemType Directory -ErrorAction SilentlyContinue
          $steamInstaller = "C:\cached-installers\steam-installer.exe"
          if (-not (Test-Path $steamInstaller)) {
              Write-Host "-> Downloading Steam..."
              Invoke-WebRequest -Uri "https://cdn.akamai.steamstatic.com/client/installer/SteamSetup.exe" -OutFile $steamInstaller
          }
          Write-Host "-> Installing Steam..."
          Start-Process -FilePath $steamInstaller -ArgumentList "/S" -Wait
          $tailscaleInstaller = "C:\cached-installers\tailscale-installer.exe"
          if (-not (Test-Path $tailscaleInstaller)) {
              Write-Host "-> Downloading Tailscale..."
              Invoke-WebRequest -Uri "https://pkgs.tailscale.com/stable/tailscale-setup-latest.exe" -OutFile $tailscaleInstaller
          }
          Write-Host "-> Installing Tailscale..."
          Start-Process -FilePath $tailscaleInstaller -ArgumentList "/S" -Wait
          Write-Host "-> Core software installation complete."

      - name: "[4] Install & Configure OBS Studio for Ultimate Performance"
        shell: powershell
        run: |
          # Menghapus source 'msstore' yang menyebabkan error persetujuan
          winget source remove msstore
          winget source update
          
          Write-Host "-> Installing OBS Studio..."
          winget install --id=OBSProject.OBSStudio -e --accept-package-agreements --disable-interactivity
          
          Write-Host "-> Configuring OBS for 720p 30fps performance..."
          $profileName = "UltimatePerformance"
          $profileDir = "$env:APPDATA\obs-studio\basic\profiles\$profileName"
          New-Item -ItemType Directory -Force -Path $profileDir
          
          $obsConfig = @"
          [General]
          Name=$profileName
          [Video]
          BaseCX=1280
          BaseCY=720
          OutputCX=1280
          OutputCY=720
          FPSCommon=30
          [Output]
          Mode=Advanced
          [AdvOut]
          RecType=Standard
          RecFormat=mp4
          RecEncoder=x264
          RecTracks=1
          x264Settings=crf=28 preset=faster  # Preset lebih cepat untuk performa
          "@
          Set-Content -Path "$profileDir\basic.ini" -Value $obsConfig
          Write-Host "-> OBS Studio configured for 720p 30fps with fast encoding."

      - name: "[5] Connect Tailscale"
        shell: powershell
        run: |
          & "$env:ProgramFiles\Tailscale\tailscale.exe" up --authkey=${{ secrets.TAILSCALE_AUTH_KEY }} --hostname=ditzz-rdp-pc-$env:GITHUB_RUN_ID
          $tsIP = $null
          for ($i=1; $i -le 15; $i++){
              $tsIP = & "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4
              if($tsIP){break}
              Start-Sleep 4
          }
          if (-not $tsIP) { Write-Error "Tailscale IP not assigned."; exit 1 }
          echo "TAILSCALE_IP=$tsIP" >> $env:GITHUB_ENV
          Write-Host "-> Tailscale connected successfully with IP: $tsIP"

      - name: "[6] Prioritize Input Processes"
        shell: powershell
        run: |
          Write-Host "-> Setting input-related processes to highest priority..."
          $inputProcesses = @("explorer", "taskmgr", "rdpclip")
          foreach ($procName in $inputProcesses) {
              $processes = Get-Process -Name $procName -ErrorAction SilentlyContinue
              foreach ($proc in $processes) {
                  $proc.PriorityClass = "RealTime"
              }
          }
          Write-Host "-> Input processes now running at RealTime priority."

      - name: "[7] Create Workflow Summary"
        shell: powershell
        run: |
          $summary = @"
          # ‚úÖ RDP is Ready (Ultimate Performance Edition)
          
          Mesin ini telah dioptimalkan secara ekstrem untuk performa maksimal dan responsivitas instan.
          
          ---
          
          ### üñ•Ô∏è Access Details
          
          | Property      | Value                               |
          |---------------|-------------------------------------|
          | **IP Address**  | `${{ env.TAILSCALE_IP }}`              |
          | **Username**    | `${{ env.RDP_USER }}`                |
          | **Password**    | `${{ env.RDP_PASS }}`                |
          
          ---
          
          ### ‚ö° Performance Optimizations Applied
          
          - **Network**: Ultra-low latency tweaks (Nagle disabled, TCP buffers optimized)
          - **Input**: Zero-delay mouse/keyboard (125Hz polling, no acceleration)
          - **System**: Memory cleanup every 15 minutes, service debloat
          - **UI**: Instant response (no animations, real-time process priority)
          
          ---
          
          ### üéÆ OBS Studio Configuration
          
          - **Profile**: `UltimatePerformance`
          - **Resolution**: 720p (1280√ó720)
          - **Frame Rate**: 30 FPS
          - **Encoding**: x264 preset `faster`, CRF 28 (optimal balance quality/performance)
          - **Output Format**: MP4 (direct recording)
          
          **How to Use**: Buka OBS ‚Üí Add Display Capture ‚Üí Select profile ‚Üí Click Start Recording.
          "@
          echo $summary >> $env:GITHUB_STEP_SUMMARY
          
          Write-Host "`nAll steps complete. RDP is active with maximum performance."
          while ($true) { $ts = Get-Date -f "HH:mm:ss"; Write-Host "[$ts] Connection active..."; Start-Sleep 300 }
